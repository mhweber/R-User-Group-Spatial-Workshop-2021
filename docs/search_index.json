[["visualizing-spatial-data.html", "Chapter 7 Visualizing Spatial Data 7.1 Lesson Goals 7.2 tmap 7.3 leaflet 7.4 mapview 7.5 Visualize site data", " Chapter 7 Visualizing Spatial Data 7.1 Lesson Goals Explore several mapping libraries in R Construct a couple example visualizations with spatial data in R R is fantastic for making publication quality static maps, and for generating repetitive graphics through scripts; weve already seen how to make simple maps using base plotting,ggplot, and tmap. There are also a number of packages in R that link R code to plotting libraries developed in Javascript (or other languages) for interactive plotting and web integration. It can be hard to decide which mapping packages to learn and use - some nice advice from Martin Tennekes who created tmap: - If you know some ggplot, dont care about interactive maps, and dont want to spend a lot of time learning new packages, use ggplot - If you want interactive maps as flexible as possible, use leaflet - If you want to simply explore spatial objects ineractively as easily as possible, use mapview - Otherwise, use tmap! 7.2 tmap Load tidycensus - youll need to set your Census API key. A key can be obtained from here. library(sf,quietly = T) library(tidycensus) # census_api_key(&quot;YOUR API KEY GOES HERE&quot;) Here well start with a simple choropleth map of median household income in Benton county in Oregon. library(tidycensus) library(tmap) options(tigris_use_cache = FALSE) benton_tracts &lt;- get_acs(state = &#39;OR&#39;, county = &#39;Benton&#39;, geography = &quot;tract&quot;, variables = &quot;B19013_001&quot;, geometry = TRUE) # Rename a column benton_tracts &lt;- benton_tracts %&gt;% dplyr::rename(MedianIncome=estimate) tm_shape(benton_tracts) + tm_polygons(col=&quot;MedianIncome&quot;) Thats a pretty basic map - we can adjust a number of settings: - breaks: we can set different breaks for our map - n: we can control the number of bins - palette: we can change the color palette These are just a few - lets play with those to start. breaks = c(0, 40, 80, 120, 140) * 1000 t1 &lt;- tm_shape(benton_tracts) + tm_polygons(col=&quot;MedianIncome&quot;, breaks=breaks) t2 &lt;- tm_shape(benton_tracts) + tm_polygons(col = &quot;MedianIncome&quot;, n = 10) t3 &lt;- tm_shape(benton_tracts) + tm_polygons(col = &quot;MedianIncome&quot;, palette = &quot;BuGn&quot;) tmap_arrange(t1, t2, t3, nrow = 1) tmap also has view mode which can be handy tmap_mode(&quot;view&quot;) tm_shape(benton_tracts) + tm_polygons(col=&quot;MedianIncome&quot;) We can make multi-layered maps (shout out to Amalia Handler who used this in tmap demo for our lab group) # Load data data(World, metro, rivers, land) # Set to static mode tmap_mode(&quot;plot&quot;) # Make map that is multilayered tm_shape(land) + tm_raster(&quot;elevation&quot;, palette = terrain.colors(10)) + tm_shape(World) + tm_borders(&quot;white&quot;, lwd = .5) + tm_text(&quot;iso_a3&quot;, size = &quot;AREA&quot;) + tm_shape(metro) + tm_symbols(col = &quot;red&quot;, size = &quot;pop2020&quot;, scale = .5) + tm_legend(show = FALSE) We can make faceted maps with tmap # Set mode to interactive tmap_mode(&quot;view&quot;) # Plot it out tm_shape(World) + tm_polygons(c(&quot;pop_est&quot;, &quot;HPI&quot;,&quot;life_exp&quot;,&quot;well_being&quot;)) + tm_facets(sync = TRUE, ncol = 2) 7.3 leaflet Leaflet is an extremely popular open-source javascript library for interactive web mapping, and the leaflet R package allows R users to create Leaflet maps from R. Leaflet can plot sf or sp objects, or x / y coordinates, and can plot points, lines or polygons. There are a number of base layers you can choose from. Its worth spending some time exploring the excellent Leaflet for R site. Here we make the simplest of leaflet maps: library(leaflet) m &lt;- leaflet() %&gt;% addTiles() %&gt;% # Add default OpenStreetMap map tiles addMarkers(lng=-123.26720, lat=44.5810, popup=&quot;Here&#39;s my house&quot;) m # Print the map 7.4 mapview Mapview is a package designed for quick and easy interactive visualizations of spatial data - it makes use of leaflet but simplifies mapping functions compared to the leaflet package. Its easy to layer features with mapview - you can supply a list of objects to mapview or use + syntax as with ggplot. library(Rspatialworkshop) library(mapview) data(bike_paths) data(parks) mapview(bike_paths) + parks 7.5 Visualize site data Load a flat file with location data, convert to a spatial object, visualize with mapview and load web map layers alongside using mapview and underlying leaflet functionality First we load load an excel file containing coordinate information in a known projection and promote to an sf spatial data frame. library(Rspatialworkshop) library(sf) library(dplyr) library(readxl) library(mapview) fpath &lt;- system.file(&quot;extdata&quot;, &quot;Station_Locations.xlsx&quot;, package=&quot;Rspatialworkshop&quot;) stations &lt;- read_xlsx(fpath) glimpse(stations) ## Rows: 31 ## Columns: 3 ## $ Station &lt;chr&gt; &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;, &quot;5&quot;, &quot;6&quot;, &quot;7&quot;, &quot;8&quot;, &quot;9&quot;, &quot;10&quot;, &quot;11&quot;, &quot;12&quot;,~ ## $ x &lt;dbl&gt; -2140749, -2140111, -2124688, -2125545, -1664112, 1606578, -17~ ## $ y &lt;dbl&gt; 2502887, 2469697, 2533842, 2556987, 2770644, 2698398, 2664873,~ summary(stations$x) ## Min. 1st Qu. Median Mean 3rd Qu. Max. NA&#39;s ## -2259078 -2124688 -1561956 -1630593 -1454137 1606578 2 # common clean up steps for spatial data - we can&#39;t use data missing coordinates so drop those records stations &lt;- stations[complete.cases(stations),] # often spatial data in projected coordinates will have missing negative values for x values - common thing to fix: stations$x[stations$x &gt; 0] &lt;- 0 - stations$x[stations$x &gt; 0] stations &lt;- stations %&gt;% st_as_sf(coords = c(&quot;x&quot;, &quot;y&quot;), remove = FALSE) # in this case we know the particular Albers projection and have the information as a proj string st_crs(stations) &lt;- &quot;+proj=aea +lat_1=29.5 +lat_2=45.5 +lat_0=23 +lon_0=-96 +x_0=0 +y_0=0 +ellps=GRS80 +datum=NAD83 +units=m +no_defs&quot; Basic interactive map of our spatial stations with mapview: mapview(stations) We know of web mapping services for the National Hydrography dataset - these are stream site locations so imagine we want to visualize how closely these sites match a known rivers and stream network: library(leaflet) # create a mapview object with our stations: m &lt;- mapview(stations, legend=FALSE) # we configure the map attribute of our mapview object - try: # &#39;attributes(m) # to see those attributes # The map attribute for mapview accepts leaflet methods - in this case we use addWMSTiles to add web map service tiles to the map m@map &lt;- m@map %&gt;% addWMSTiles(group = &#39;NHDPlus&#39;, &quot;https://watersgeo.epa.gov/arcgis/services/NHDPlus_NP21/NHDSnapshot_NP21/MapServer/WmsServer?&quot;, layers = 4, options = WMSTileOptions(format = &quot;image/png&quot;, transparent = TRUE), attribution = &quot;&quot;) %&gt;% addWMSTiles(group = &#39;NHDPlusHR&#39;, &quot;https://hydro.nationalmap.gov/arcgis/services/NHDPlus_HR/MapServer/WMSServer?&quot;, layers = 9, options = WMSTileOptions(format = &quot;image/png&quot;, transparent = TRUE), attribution = &quot;&quot;) %&gt;% mapview:::mapViewLayersControl(names = c(&quot;NHDPlus&quot;,&quot;NHDPlusHR&quot;)) m "]]
