[["geoprocessing.html", "Chapter 6 Geoprocessing 6.1 Lesson Goals 6.2 Example one 6.3 Example two 6.4 Example Three 6.5 Example Four", " Chapter 6 Geoprocessing 6.1 Lesson Goals A quick look at a couple typical topological operations (spatial subsetting, spatial joins, dissolve) using sf 6.2 Example one 6.2.1 Spatial Subsetting Lets look at the bike paths and parks data in the awra2020spatial package. A typical spatial question we might ask of our data is what trails go through parks in town? A great feature of sf is it supports spatial indexing: library(sf) library(awra2020spatial) data(parks) data(bike_paths) plot(bike_paths$geoms, col=&#39;green&#39;, axes=T) plot(parks$geoms, col=&#39;blue&#39;, add=T) paths_in_parks &lt;- bike_paths[parks,] plot(paths_in_parks$geoms, col=&#39;red&#39;, lwd = 2, add=T) title(main=&#39;Bike Paths in Parks in Austin&#39;) 6.3 Example two 6.3.1 Spatial Join First well use chained operations to select just a couple columns from both bike_paths and parks, and then well do a spatial join operation in sf. Note again, when we do a select on just attribute column, the geometry column remains - geometry is sticky in sf! library(dplyr) bike_paths &lt;- bike_paths %&gt;% dplyr::select(ROUTE_NAME) parks &lt;- parks %&gt;% dplyr::select(LOCATION_NAME, ZIPCODE,PARK_TYPE) parks_bike_paths &lt;- st_join(parks, bike_paths) # st_intersects is the default glimpse(parks_bike_paths) ## Rows: 744 ## Columns: 5 ## $ LOCATION_NAME &lt;chr&gt; &quot;Stratford Overlook Greenbelt&quot;, &quot;Highland Neighborhood P~ ## $ ZIPCODE &lt;chr&gt; &quot;78746&quot;, &quot;78752&quot;, &quot;78703&quot;, &quot;78753&quot;, &quot;78724&quot;, &quot;78702&quot;, &quot;7~ ## $ PARK_TYPE &lt;chr&gt; &quot;Greenbelt&quot;, &quot;Neighborhood&quot;, &quot;Pocket&quot;, &quot;Neighborhood&quot;, &quot;~ ## $ ROUTE_NAME &lt;chr&gt; NA, NA, NA, NA, NA, NA, &quot;TOWN LAKE HIKE &amp; BIKE TRAIL&quot;, &quot;~ ## $ geoms &lt;MULTIPOLYGON [Â°]&gt; MULTIPOLYGON (((-97.78802 3..., MULTIPOLYGO~ 6.4 Example Three 6.4.1 Dissolve We can perform a spatial dissolve in sf using dplyr group_by and summarize functions with an sf object! Note that we could pull down tidycensus at tract level, but instead we want to look at running a dissolve to get from block group to tract level library(ggplot2) parks$AREA &lt;- st_area(parks) parks_zip &lt;- parks %&gt;% group_by(ZIPCODE) %&gt;% summarise(AREA = sum(AREA)) %&gt;% ggplot() + geom_sf(aes(fill=(ZIPCODE))) + ggtitle(&quot;Austin Parks by Zip Code&quot;) + theme_bw() parks_zip 6.5 Example Four 6.5.1 Spatial Overlap Heres a fun example using material posted by Nicholas Tierney here that he put together based on this Stack Overflow discussion. First well extract the Portland Oregon metropolitan area using the tidycensus and tigris packages library(ggplot2) library(tidycensus) library(tidyverse) library(tigris) tracts &lt;- get_acs(geography = &quot;tract&quot;, variables = &quot;DP04_0134&quot;, state = &quot;OR&quot;, geometry = TRUE, progress_bar = FALSE) pdx &lt;- core_based_statistical_areas(cb = TRUE, progress_bar = FALSE) %&gt;% filter(GEOID == &quot;38900&quot;) ggplot() + geom_sf(data = pdx, fill = &quot;forestgreen&quot;) 6.5.1.1 Next well create a dummy spatial polygon file to compare area with using the rmapshaper package to simplify the border of the PDX metropolitan polygon library(rmapshaper) pdx_simplified &lt;- pdx %&gt;% ms_simplify(keep = 0.01) 6.5.1.2 Then we can overlay polygons in ggplot to see how similar they are, showing the original census PDX metropolitan area in green, and new simplified polygon in red ggplot() + geom_sf(data = pdx, fill = &quot;forestgreen&quot;, alpha = 0.5) + geom_sf(data = pdx_simplified, fill = &quot;firebrick&quot;, alpha = 0.5) 6.5.1.3 Now that we have an original and simplified polygon to compare, the process we want to use is: Calculate original metro area polygon area Calculate the intersection of these two areas - original and simplified (st_intersection) Calculate that area (st_area) Then only keep the relevant data again Well run the steps then combine into a function original_area &lt;- pdx %&gt;% mutate(original_area = st_area(.)) %&gt;% select(NAME, original_area) %&gt;% st_drop_geometry() intersection_area &lt;- st_intersection(pdx, pdx_simplified) %&gt;% mutate(intersect_area = st_area(.)) %&gt;% select(NAME, intersect_area) %&gt;% st_drop_geometry() 6.5.1.4 This step should have given you an error THIS IS VERY COMMON WORKING WITH SPATIAL DATA IN R AND USING sf. 6.5.1.5 Fix for the error pdx_simplified &lt;- st_make_valid(pdx_simplified) pdx &lt;- st_make_valid(pdx) original_area &lt;- pdx %&gt;% mutate(original_area = st_area(.)) %&gt;% select(NAME, original_area) %&gt;% st_drop_geometry() intersection_area &lt;- st_intersection(pdx, pdx_simplified) %&gt;% mutate(intersect_area = st_area(.)) %&gt;% select(NAME, intersect_area) %&gt;% st_drop_geometry() # show the area of intersection intersection_area ## NAME intersect_area ## 1 Portland-Vancouver-Hillsboro, OR-WA 16524152114 [m^2] # show the proportion of overlap intersection_area %&gt;% left_join(original_area, by = &quot;NAME&quot;) %&gt;% mutate(orig = as.numeric(original_area), new = as.numeric(intersect_area), proportion = (new / orig) * 100) ## NAME intersect_area original_area ## 1 Portland-Vancouver-Hillsboro, OR-WA 16524152114 [m^2] 17633108214 [m^2] ## orig new proportion ## 1 17633108214 16524152114 93.71094 6.5.1.6 Why did I use as.numeric in the mutate statement above? 6.5.1.7 Answer Because sf will store area for features using units - which is convenient and forces you to be up front about units used, but you cant do calculations with attributes stored as units - have to convert them to numeric 6.5.1.8 All steps rolled into a function calculate_spatial_overlap &lt;- function(shape_new, shape_old, shared_column_name) { intersection_area &lt;- st_intersection(shape_new, shape_old) %&gt;% mutate(intersect_area = st_area(.)) %&gt;% select(shared_column_name, intersect_area) %&gt;% st_drop_geometry() # Create a fresh area variable shape_old_areas &lt;- shape_old %&gt;% mutate(original_area = st_area(.)) %&gt;% select(original_area, shared_column_name) %&gt;% st_drop_geometry() intersection_area %&gt;% left_join(shape_old_areas, by = shared_column_name) %&gt;% mutate(orig = as.numeric(original_area), new = as.numeric(intersect_area), proportion = (new / orig) * 100) } calculate_spatial_overlap(pdx, pdx_simplified, shared_column_name=&#39;NAME&#39;) ## NAME intersect_area original_area ## 1 Portland-Vancouver-Hillsboro, OR-WA 16524152114 [m^2] 17295383068 [m^2] ## orig new proportion ## 1 17295383068 16524152114 95.54083 "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
