[["geoprocessing.html", "Chapter 6 Geoprocessing 6.1 Lesson Goals 6.2 Example one 6.3 Example two 6.4 Example Three 6.5 Example Four", " Chapter 6 Geoprocessing 6.1 Lesson Goals A quick look at a couple typical topological operations (spatial subsetting, spatial joins, dissolve) using sf 6.2 Example one 6.2.1 Spatial Subsetting Lets look at the bike paths and parks data in the awra2020spatial package. A typical spatial question we might ask of our data is what trails go through parks in town? A great feature of sf is it supports spatial indexing: library(sf) library(awra2020spatial) data(parks) data(bike_paths) plot(bike_paths$geoms, col=&#39;green&#39;, axes=T) plot(parks$geoms, col=&#39;blue&#39;, add=T) paths_in_parks &lt;- bike_paths[parks,] plot(paths_in_parks$geoms, col=&#39;red&#39;, lwd = 2, add=T) title(main=&#39;Bike Paths in Parks in Austin&#39;) 6.3 Example two 6.3.1 Spatial Join First well use chained operations to select just a couple columns from both bike_paths and parks, and then well do a spatial join operation in sf. Note again, when we do a select on just attribute column, the geometry column remains - geometry is sticky in sf! library(dplyr) bike_paths &lt;- bike_paths %&gt;% dplyr::select(ROUTE_NAME) parks &lt;- parks %&gt;% dplyr::select(LOCATION_NAME, ZIPCODE,PARK_TYPE) parks_bike_paths &lt;- st_join(parks, bike_paths) # st_intersects is the default glimpse(parks_bike_paths) ## Rows: 744 ## Columns: 5 ## $ LOCATION_NAME &lt;chr&gt; &quot;Stratford Overlook Greenbelt&quot;, &quot;Highland Neighborhood P~ ## $ ZIPCODE &lt;chr&gt; &quot;78746&quot;, &quot;78752&quot;, &quot;78703&quot;, &quot;78753&quot;, &quot;78724&quot;, &quot;78702&quot;, &quot;7~ ## $ PARK_TYPE &lt;chr&gt; &quot;Greenbelt&quot;, &quot;Neighborhood&quot;, &quot;Pocket&quot;, &quot;Neighborhood&quot;, &quot;~ ## $ ROUTE_NAME &lt;chr&gt; NA, NA, NA, NA, NA, NA, &quot;TOWN LAKE HIKE &amp; BIKE TRAIL&quot;, &quot;~ ## $ geoms &lt;MULTIPOLYGON [Â°]&gt; MULTIPOLYGON (((-97.78802 3..., MULTIPOLYGO~ 6.4 Example Three 6.4.1 Dissolve We can perform a spatial dissolve in sf using dplyr group_by and summarize functions with an sf object! Note that we could pull down tidycensus at tract level, but instead we want to look at running a dissolve to get from block group to tract level library(ggplot2) parks$AREA &lt;- st_area(parks) parks_zip &lt;- parks %&gt;% group_by(ZIPCODE) %&gt;% summarise(AREA = sum(AREA)) %&gt;% ggplot() + geom_sf(aes(fill=(ZIPCODE))) + ggtitle(&quot;Austin Parks by Zip Code&quot;) + theme_bw() parks_zip 6.5 Example Four 6.5.1 Spatial Overlap Heres a fun example using material posted by Nicholas Tierney here that he put together based on this Stack Overflow discussion. library(ggplot2) library(tidycensus) library(tidyverse) library(tigris) tracts &lt;- get_acs(geography = &quot;tract&quot;, variables = &quot;DP04_0134&quot;, state = &quot;OR&quot;, geometry = TRUE, progress_bar = FALSE) pdx &lt;- core_based_statistical_areas(cb = TRUE, progress_bar = FALSE) %&gt;% filter(GEOID == &quot;38900&quot;) ggplot(pdx) + geom_sf() "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
